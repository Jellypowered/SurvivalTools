using HarmonyLib;
using RimWorld;
using System.Linq;
using Verse;

namespace SurvivalTools.HarmonyStuff
{
    [StaticConstructorOnStartup]
    public static class SurvivalToolExtensionLogger
    {
        static SurvivalToolExtensionLogger()
        {
            if (!SurvivalToolUtility.IsDebugLoggingEnabled)
                return;

            var defsWithExt = DefDatabase<ThingDef>.AllDefs
                .Where(d => d.GetModExtension<SurvivalToolProperties>() != null)
                .ToList();

            Log.Message($"[SurvivalTools] Found {defsWithExt.Count} ThingDefs with SurvivalToolProperties extension applied.");

            foreach (var def in defsWithExt)
            {
                var ext = def.GetModExtension<SurvivalToolProperties>();
                Log.Message($"[SurvivalTools] {def.defName} has SurvivalToolProperties.");

                if (ext.baseWorkStatFactors != null && ext.baseWorkStatFactors.Count > 0)
                {
                    foreach (var factor in ext.baseWorkStatFactors)
                    {
                        if (factor?.stat != null)
                            Log.Message($"    - {factor.stat.defName}: {factor.value.ToStringPercent()}");
                    }
                }
                else
                {
                    Log.Message("    (no baseWorkStatFactors defined)");
                }

                if (ext.toolWearFactor > 0f)
                    Log.Message($"    - toolWearFactor: {ext.toolWearFactor}");

                if (ext.defaultSurvivalToolAssignmentTags != null && ext.defaultSurvivalToolAssignmentTags.Count > 0)
                {
                    var tags = string.Join(", ", ext.defaultSurvivalToolAssignmentTags);
                    Log.Message($"    - defaultSurvivalToolAssignmentTags: {tags}");
                }
            }

            // Now dump all Harmony patches
            var method = AccessTools.Method(typeof(ThingDef), nameof(ThingDef.SpecialDisplayStats));
            var patches = Harmony.GetPatchInfo(method);

            if (patches == null)
            {
                Log.Message("[SurvivalTools] No patches found on ThingDef.SpecialDisplayStats");
                return;
            }

            Log.Message("[SurvivalTools] Patches on ThingDef.SpecialDisplayStats:");

            foreach (var patch in patches.Postfixes)
                Log.Message($"  POSTFIX: {patch.PatchMethod.FullDescription()} (Owner={patch.owner}, Priority={patch.priority})");

            foreach (var patch in patches.Prefixes)
                Log.Message($"  PREFIX: {patch.PatchMethod.FullDescription()} (Owner={patch.owner}, Priority={patch.priority})");

            foreach (var patch in patches.Transpilers)
                Log.Message($"  TRANSPILER: {patch.PatchMethod.FullDescription()} (Owner={patch.owner}, Priority={patch.priority})");
        }
    }
}